AppType=JavaFX
Build1=Default,cloyd.blink
File1=activity.bjl
File10=camera-icon.png
File100=sk06_btMinEnt.png
File101=sk06_left.png
File102=sk06_right.png
File103=sk06_title.png
File104=sk06_top_left.png
File105=sk06_top_right.png
File106=snapshotbutton.png
File107=systemstatusoffline.png
File108=systemstatusonline.png
File109=vdSk01.bjl
File11=cellitem.bjl
File110=vdSk02.bjl
File111=vdSk03.bjl
File112=vdSk04.bjl
File113=vdSk05.bjl
File114=vdSk06.bjl
File115=video-camera.png
File12=home.png
File13=liveviewbuttontranparent.png
File14=main.bjl
File15=refresh.png
File16=sk01.css
File17=sk01_bottom.png
File18=sk01_bottom_left.png
File19=sk01_bottom_right.png
File2=activity.png
File20=sk01_btClose.png
File21=sk01_btCloseEnt.png
File22=sk01_btMax.png
File23=sk01_btMaxEnt.png
File24=sk01_btMin.png
File25=sk01_btMinEnt.png
File26=sk01_left.png
File27=sk01_right.png
File28=sk01_title.png
File29=sk01_top_left.png
File3=bars_0bars.png
File30=sk01_top_right.png
File31=sk02.css
File32=sk02_bottom.png
File33=sk02_bottom_left.png
File34=sk02_bottom_right.png
File35=sk02_btClose.png
File36=sk02_btCloseEnt.png
File37=sk02_btMax.png
File38=sk02_btMaxEnt.png
File39=sk02_btMin.png
File4=bars1blue.png
File40=sk02_btMinEnt.png
File41=sk02_left.png
File42=sk02_right.png
File43=sk02_title.png
File44=sk02_top_left.png
File45=sk02_top_right.png
File46=sk03.css
File47=sk03_bottom.png
File48=sk03_bottom_left.png
File49=sk03_bottom_right.png
File5=bars2blue.png
File50=sk03_btClose.png
File51=sk03_btCloseEnt.png
File52=sk03_btMax.png
File53=sk03_btMaxEnt.png
File54=sk03_btMin.png
File55=sk03_btMinEnt.png
File56=sk03_left.png
File57=sk03_right.png
File58=sk03_title.png
File59=sk03_top_left.png
File6=bars3blue.png
File60=sk03_top_right.png
File61=sk04.css
File62=sk04_bottom.png
File63=sk04_bottom_left.png
File64=sk04_bottom_right.png
File65=sk04_btClose.png
File66=sk04_btCloseEnt.png
File67=sk04_btMax.png
File68=sk04_btMaxEnt.png
File69=sk04_btMin.png
File7=bars4blue.png
File70=sk04_btMinEnt.png
File71=sk04_left.png
File72=sk04_right.png
File73=sk04_title.png
File74=sk04_top_left.png
File75=sk04_top_right.png
File76=sk05.css
File77=sk05_bottom.png
File78=sk05_bottom_left.png
File79=sk05_bottom_right.png
File8=bars5blue.png
File80=sk05_btClose.png
File81=sk05_btCloseEnt.png
File82=sk05_btMax.png
File83=sk05_btMaxEnt.png
File84=sk05_btMin.png
File85=sk05_btMinEnt.png
File86=sk05_left.png
File87=sk05_right.png
File88=sk05_title.png
File89=sk05_top_left.png
File9=blink_clip_roll_blue_dot_icon.png
File90=sk05_top_right.png
File91=sk06.css
File92=sk06_bottom.png
File93=sk06_bottom_left.png
File94=sk06_bottom_right.png
File95=sk06_btClose.png
File96=sk06_btCloseEnt.png
File97=sk06_btMax.png
File98=sk06_btMaxEnt.png
File99=sk06_btMin.png
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup100=Default Group
FileGroup101=Default Group
FileGroup102=Default Group
FileGroup103=Default Group
FileGroup104=Default Group
FileGroup105=Default Group
FileGroup106=Default Group
FileGroup107=Default Group
FileGroup108=Default Group
FileGroup109=Default Group
FileGroup11=Default Group
FileGroup110=Default Group
FileGroup111=Default Group
FileGroup112=Default Group
FileGroup113=Default Group
FileGroup114=Default Group
FileGroup115=Default Group
FileGroup12=Default Group
FileGroup13=Default Group
FileGroup14=Default Group
FileGroup15=Default Group
FileGroup16=Default Group
FileGroup17=Default Group
FileGroup18=Default Group
FileGroup19=Default Group
FileGroup2=Default Group
FileGroup20=Default Group
FileGroup21=Default Group
FileGroup22=Default Group
FileGroup23=Default Group
FileGroup24=Default Group
FileGroup25=Default Group
FileGroup26=Default Group
FileGroup27=Default Group
FileGroup28=Default Group
FileGroup29=Default Group
FileGroup3=Default Group
FileGroup30=Default Group
FileGroup31=Default Group
FileGroup32=Default Group
FileGroup33=Default Group
FileGroup34=Default Group
FileGroup35=Default Group
FileGroup36=Default Group
FileGroup37=Default Group
FileGroup38=Default Group
FileGroup39=Default Group
FileGroup4=Default Group
FileGroup40=Default Group
FileGroup41=Default Group
FileGroup42=Default Group
FileGroup43=Default Group
FileGroup44=Default Group
FileGroup45=Default Group
FileGroup46=Default Group
FileGroup47=Default Group
FileGroup48=Default Group
FileGroup49=Default Group
FileGroup5=Default Group
FileGroup50=Default Group
FileGroup51=Default Group
FileGroup52=Default Group
FileGroup53=Default Group
FileGroup54=Default Group
FileGroup55=Default Group
FileGroup56=Default Group
FileGroup57=Default Group
FileGroup58=Default Group
FileGroup59=Default Group
FileGroup6=Default Group
FileGroup60=Default Group
FileGroup61=Default Group
FileGroup62=Default Group
FileGroup63=Default Group
FileGroup64=Default Group
FileGroup65=Default Group
FileGroup66=Default Group
FileGroup67=Default Group
FileGroup68=Default Group
FileGroup69=Default Group
FileGroup7=Default Group
FileGroup70=Default Group
FileGroup71=Default Group
FileGroup72=Default Group
FileGroup73=Default Group
FileGroup74=Default Group
FileGroup75=Default Group
FileGroup76=Default Group
FileGroup77=Default Group
FileGroup78=Default Group
FileGroup79=Default Group
FileGroup8=Default Group
FileGroup80=Default Group
FileGroup81=Default Group
FileGroup82=Default Group
FileGroup83=Default Group
FileGroup84=Default Group
FileGroup85=Default Group
FileGroup86=Default Group
FileGroup87=Default Group
FileGroup88=Default Group
FileGroup89=Default Group
FileGroup9=Default Group
FileGroup90=Default Group
FileGroup91=Default Group
FileGroup92=Default Group
FileGroup93=Default Group
FileGroup94=Default Group
FileGroup95=Default Group
FileGroup96=Default Group
FileGroup97=Default Group
FileGroup98=Default Group
FileGroup99=Default Group
Group=Default Group
Library1=jcore
Library10=xui views
Library11=jshell
Library12=jsql
Library13=jrandomaccessfile
Library14=jb4xencryption
Library15=jcontrolsfx
Library2=jfx
Library3=jokhttputils2
Library4=json
Library5=jreflection
Library6=javaobject
Library7=xcustomlistview
Library8=jbitmapcreator
Library9=jxui
Module1=Badger
Module2=frmActivity
Module3=frmMedia
Module4=KeyValueStore
NumberOfFiles=115
NumberOfLibraries=15
NumberOfModules=4
Version=8.1
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 900
	#MainFormHeight: 1000 
	'#VirtualMachineArgs: -Xms1024m -Xmx1024m
	#AdditionalJar: sqlite-jdbc-3.7.2
	#AdditionalJar: bcprov-jdk15on-154
#End Region

Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Private emailAddress As String
	Private password As String
	Private authToken As String 
	Private userRegion As String = "u006"
	Private accountID As String = "88438" 'ignore
	Private networkID As String = "94896"
	Private commandID As String
	Private commandComplete As Boolean
	Private cameraThumbnail As String
	Private fx As JFX
	Private MainForm As Form
	Private lbTitle As Label 'ignore
	Private xMouse, yMouse As Double
	Private isMaximized As Boolean = False
	Private ivClose As ImageView
	Private ivMax As ImageView
	Private ivMin As ImageView
	Private AtualSkin As String
	Private imgInit As String
	Private isMaximized As Boolean = False
	Private f_X, f_Y, f_W, f_H As Double 'ignore
	Private btnDriveway As Button 'ignore
	Private response As String
	Private ivDriveway As ImageView
	Private lblStatus As Label 'ignore
	Private ivFrontDoor As ImageView
	Private ivSideYard As ImageView
	Private lblDriveway As Label 'ignore
	Private lblFrontDoor As Label 'ignore
	Private lblSideYard As Label 'ignore
	Private clvDriveway As CustomListView
	Private clvFrontDoor As CustomListView
	Private clvSideYard As CustomListView
	Private lblSyncModule As Label 'ignore
	Private xui As XUI
	Private btnActivity As Button 'ignore
	Private btnRefresh As Button 'ignore
	Private prevDrivewayUpdateTime As String
	Private prevFrontDoorUpdateTime As String
	Private ivSyncModule As ImageView 'ignore
	Private ivSyncModuleWiFi As ImageView 'ignore
	Private drivewayArmedStatus As String
	Private frontdoorArmedStatus As String
	Private sideyardArmedStatus As String
	Private btnDrivewayNewClip As Button 'ignore
	Private btnFrontDoorNewClip As Button 'ignore
	Private btnSideYardNewClip As Button 'ignore
	Private badger1 As Badger
	Private prevCameraThumbnail As String
	Private kvs As KeyValueStore
	Private btnDrivewayRefresh As Button 'ignore
	Private btnFrontDoorRefresh As Button 'ignore
	Private btnSideYardRefresh As Button 'ignore
	Private swArmed As B4XSwitch 'ignore
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	Try
		Dim skinTemp As String
		Dim skinDefault As String
	
		If File.Exists(File.DirApp, "skin.ini") Then
			skinTemp = File.ReadString(File.DirApp, "skin.ini")
		Else
			'File.WriteString(File.DirApp, "skin.ini", "vdSk03")
			skinTemp = "vdSk03"
		End If
	
		If skinTemp = "" Then
			skinDefault = "vdSk03"
		Else
			If skinTemp = "vdSk01" Or skinTemp = "vdSk02" Or skinTemp = "vdSk03" Or skinTemp = "vdSk04" Or skinTemp = "vdSk05" Or skinTemp = "vdSk06" Then
				skinDefault = skinTemp
			Else
				skinDefault = "vdSk03"
			End If
		End If
	
		MainForm = Form1
		MainForm.SetFormStyle("TRANSPARENT")
		MainForm.RootPane.LoadLayout(skinDefault) 'Load the layout file.
		AtualSkin = skinDefault
		MainForm.BackColor = fx.Colors.Transparent
		MainForm.RootPane.Style = "-fx-background-color:transparent;-fx-effect: dropshadow(three-pass-box, rgba(0, 0, 0, 1.0) , 15,0, 0.0, 0.0);"
		MainForm.Resizable = True
		MainForm.Icon = fx.LoadImage(File.DirAssets, "home.png")
		MainForm.Title = "Catanaoan Blink XT2 Cameras v1.0"
		lbTitle.MouseCursor = fx.Cursors.MOVE
		lbTitle.Text = "Catanaoan Blink XT2 Cameras v1.0"
		Dim Obj As Reflector
		Obj.Target = ivClose
		Obj.AddEventHandler2("Close_Entered", "onMouseEnteredProperty")
		Obj.AddEventHandler2("Close_Exited", "onMouseExitedProperty")
		Dim Obj As Reflector
		Obj.Target = ivMax
		Obj.AddEventHandler2("Max_Entered", "onMouseEnteredProperty")
		Obj.AddEventHandler2("Max_Exited", "onMouseExitedProperty")
		Dim Obj As Reflector
		Obj.Target = ivMin
		Obj.AddEventHandler2("Min_Entered", "onMouseEnteredProperty")
		Obj.AddEventHandler2("Min_Exited", "onMouseExitedProperty")
		imgInit = AtualSkin.SubString(2).ToLowerCase
		Get_css
'		MainForm.WindowWidth = CheckMonitor.MaxX - CheckMonitor.MinX 'fx.PrimaryScreen.MaxX - fx.PrimaryScreen.MinX
'		MainForm.WindowLeft = CheckMonitor.MinX 'fx.PrimaryScreen.MinX
'		MainForm.WindowHeight = CheckMonitor.MaxY - CheckMonitor.MinY 'fx.PrimaryScreen.MaxY - fx.PrimaryScreen.MinY
'		MainForm.WindowTop = CheckMonitor.MinY 'fx.PrimaryScreen.MinY
		MainForm.WindowLeft = CheckMonitor.MaxX	- MainForm.Width - 20dip
		MainForm.WindowTop = CheckMonitor.MaxY - MainForm.Height - 20dip
	
		lblStatus.TextColor = fx.Colors.White
		MainForm.Show
		
		If File.Exists(File.DirApp, "account.txt") Then
			Dim List1 As List
			List1 = File.ReadList(File.DirApp, "account.txt")
			For i = 0 To List1.Size - 1
				If i = 0 Then
					emailAddress = List1.Get(i)
				Else if i = 1 Then
					password = List1.Get(i)
				End If
			Next
		Else
			fx.Msgbox2(MainForm,"Account.txt not found!", "Catanaoan Blink XT2 Cameras v1.0","OK","","",fx.MSGBOX_ERROR)
			ExitApplication
		End If
		
		btnDriveway.Enabled = False
		btnRefresh.Enabled = False
		btnActivity.Enabled = False
		btnDrivewayNewClip.Enabled = False
		btnFrontDoorNewClip.Enabled = False
		btnSideYardNewClip.Enabled = False
		badger1.Initialize
		RequestAuthToken
	Catch
		Log(LastException)
	End Try
	
End Sub

'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	btnDriveway.Enabled = True
	btnRefresh.Enabled = True
	btnActivity.Enabled = True
	btnDrivewayNewClip.Enabled = True
	btnFrontDoorNewClip.Enabled = True
	btnSideYardNewClip.Enabled = True
	fx.msgbox2(MainForm,Error.Message,MainForm.Title,"OK","","", fx.msgbox_ERROR)
	Dim shl As Shell
	Try
		shl.Initialize("shl", "java.exe" , Array As String("-jar", "Blink4Java.jar"))
		shl.WorkingDirectory = File.DirApp
		shl.Run(-1)
	Catch
		Log("Application_Error: " & LastException.Message)
	End Try

	Return False ' handled
End Sub

Sub btnDriveway_Click
	clvDriveway.Clear
	clvFrontDoor.Clear
	clvSideYard.Clear
	btnDriveway.Enabled = False
	btnRefresh.Enabled = False
	btnActivity.Enabled = False
	btnDrivewayNewClip.Enabled = False
	btnFrontDoorNewClip.Enabled = False
	btnSideYardNewClip.Enabled = False
	
'	Dim rs As ResumableSub = RefreshCameras(False, "All")
'	wait for (rs) complete (Result As Object)

	BlurIV("Driveway.jpg",ivDriveway)
	BlurIV("FrontDoor.jpg",ivFrontDoor)
	BlurIV("SideYard.jpg",ivSideYard)

	Dim rs As ResumableSub = RefreshCameras(False, "347574")
	wait for (rs) complete (Result As Object)
	
	Dim rs As ResumableSub = RefreshCameras(False, "236967")
	wait for (rs) complete (Result As Object)
	
	Dim rs As ResumableSub = RefreshCameras(False, "458236")
	wait for (rs) complete (Result As Object)

End Sub

Sub RequestAuthToken As ResumableSub 
	Try
		lblStatus.Text = "Authenticating..."
		Dim jobLogin As HttpJob
		jobLogin.Initialize("", Me)
		jobLogin.PostString("https://rest.prod.immedia-semi.com/login","email=" &  emailAddress & "&password=" & password)
		jobLogin.GetRequest.SetContentType("application/x-www-form-urlencoded")
		Wait For (jobLogin) JobDone(jobLogin As HttpJob)
		If jobLogin.Success Then
			lblStatus.Text = "Successfully logged in to the Blink server..."
			'File.WriteString(File.DirApp,"response_login.txt",jobLogin.GetString)
			GetAuthInfo(jobLogin.GetString)

			If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Then
				btnDriveway.Enabled = True
				btnRefresh.Enabled = True
				btnActivity.Enabled = True
				btnDrivewayNewClip.Enabled = True
				btnFrontDoorNewClip.Enabled = True
				btnSideYardNewClip.Enabled = True
				jobLogin.Release
				Return Null
			Else
				lblStatus.Text = "AuthToken acquired..." 
			End If
		Else
			lblStatus.Text = GetRESTError(jobLogin.ErrorMessage) ' "RequestAuthToken error: " & jobLogin.GetString
			Log("RequestAuthToken error: " & jobLogin.ErrorMessage)
			btnDriveway.Enabled = True
			btnRefresh.Enabled = True
			btnActivity.Enabled = True
			btnDrivewayNewClip.Enabled = True
			btnFrontDoorNewClip.Enabled = True
			btnSideYardNewClip.Enabled = True
			jobLogin.Release
			Return Null
		End If
		jobLogin.Release
		Dim rs As ResumableSub = RefreshCameras(True, "All")
		wait for (rs) complete (Result As Object)
	Catch
		Log("RequestAuthToken LastException: " & LastException)
	End Try
	Return Null
End Sub

Sub RefreshCameras(FirstRun As Boolean, whatCamera As String) As ResumableSub
	Try
		Dim camera As String
		Dim iv As ImageView
		Dim clv As CustomListView
		Dim links As List
		Dim attempts As Int
		links = Array("347574", "236967", "458236")
				
		Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/syncmodules")
		wait for (rs) complete (Result As Object)
		
		If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Then
			btnDriveway.Enabled = True
			btnRefresh.Enabled = True
			btnActivity.Enabled = True
			btnDrivewayNewClip.Enabled = True
			btnFrontDoorNewClip.Enabled = True
			btnSideYardNewClip.Enabled = True
			Return Null
		End If
		
		'File.WriteString(File.DirApp,"response_syncmodules.txt",response)
		Dim rs As ResumableSub = GetSyncModuleInfo(response)
		wait for (rs) complete (Result As Object)
		
		Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/homescreen")
		wait for (rs) complete (Result As Object)
		
		If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Then
			btnDriveway.Enabled = True
			btnRefresh.Enabled = True
			btnActivity.Enabled = True
			btnDrivewayNewClip.Enabled = True
			btnFrontDoorNewClip.Enabled = True
			btnSideYardNewClip.Enabled = True
			Return Null
		End If
		
		File.WriteString(File.DirApp,"GetHomescreen.txt",response)
		
		Dim rs As ResumableSub = GetHomescreen(response)
		wait for (rs) complete (Result As Object)
		
		If FirstRun= False And whatCamera = "All"  Then
			BlurIV("Driveway.jpg",ivDriveway)
			BlurIV("FrontDoor.jpg",ivFrontDoor)
			BlurIV("SideYard.jpg",ivSideYard)
		End If
		
		' https://www.b4x.com/android/forum/threads/b4x-resumable-subs-that-return-values-resumablesub.82670/
		Dim rs As ResumableSub = GetUnwatchedVideos
		wait for (rs) complete (Result As Object)
		
		For Each link As String In links
			camera = link
			If camera <> whatCamera And whatCamera <> "All" Then
				Continue
			End If
			
			If FirstRun Then
				If camera = "347574" Then
					lblStatus.Text = "Retrieving Driveway thumbnail..."
					iv = ivDriveway
					clv = clvDriveway
				Else If camera = "236967" Then
					lblStatus.Text = "Retrieving Front Door thumbnail..."
					iv = ivFrontDoor
					clv = clvFrontDoor
				Else If camera = "458236" Then
					lblStatus.Text = "Retrieving Side Yard thumbnail..."
					iv = ivSideYard
					clv = clvSideYard
				End If
			Else
				If camera = "347574" Then
					lblStatus.Text = "Capturing a new Driveway thumbnail..."
					iv = ivDriveway
					clv = clvDriveway
					attempts = 15
				Else If camera = "236967" Then
					lblStatus.Text = "Capturing a new Front Door thumbnail..."
					iv = ivFrontDoor
					clv = clvFrontDoor
					attempts = 15
				Else If camera = "458236" Then
					lblStatus.Text = "Capturing a new Side Yard thumbnail..."
					iv = ivSideYard
					clv = clvSideYard
					attempts = 15
				End If
			End If

			If FirstRun Then
				Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/" & camera)
				wait for (rs) complete (Result As Object)
				
				'File.WriteString(File.DirApp,"response_camera.txt",response)
				Dim rs As ResumableSub = GetCameraInfo(response,clv)
				wait for (rs) complete (Result As Object)
				
				Dim rs As ResumableSub = DownloadImage("https://rest-" & userRegion &".immedia-semi.com/" & cameraThumbnail & ".jpg",iv, camera)
				wait for (rs) complete (Result As Object)
				
			Else
				Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/" & camera)
				wait for (rs) complete (Result As Object)
				
				'File.WriteString(File.DirApp,"response_camera.txt",response)
				Dim rs As ResumableSub = GetCameraInfo(response,Null)
				wait for (rs) complete (Result As Object)
				
				prevCameraThumbnail = cameraThumbnail
				
				Dim rs As ResumableSub = RESTPost("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/" & camera & "/thumbnail")
				wait for (rs) complete (Result As Object)

				'File.WriteString(File.DirApp,"response_camerathumbnail.txt",response)
				If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Then
					btnDriveway.Enabled = True
					btnRefresh.Enabled = True
					btnActivity.Enabled = True
					btnDrivewayNewClip.Enabled = True
					btnFrontDoorNewClip.Enabled = True
					btnSideYardNewClip.Enabled = True
					Return Null
				Else
					Dim rs As ResumableSub = GetCommandID(response)
					wait for (rs) complete (Result As Object)
					
					Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
					wait for (rs) complete (Result As Object)

					'File.WriteString(File.DirApp,"response_command.txt",response)
					If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Then
						btnDriveway.Enabled = True
						btnRefresh.Enabled = True
						btnActivity.Enabled = True
						btnDrivewayNewClip.Enabled = True
						btnFrontDoorNewClip.Enabled = True
						btnSideYardNewClip.Enabled = True
						Return Null
					Else
						Dim reChecked As Boolean
						For i = 1 To attempts
						
							' https://www.b4x.com/android/forum/threads/b4x-resumable-subs-that-return-values-resumablesub.82670/
							Dim rs As ResumableSub = GetCommandResponse(iv,clv,camera, i, attempts)
							wait for (rs) complete (Result As Object)
							If Result Then Exit
							Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
							wait for (rs) complete (Result As Object)
							Sleep(1000) ' 1 second
							
							If i = attempts And reChecked =  False Then
								reChecked = True
								Log("*********** HERE *********** i = " & i)
								Dim rs As ResumableSub = RESTPost("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/" & camera & "/thumbnail")
								wait for (rs) complete (Result As Object)
								
								If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Then
									btnDriveway.Enabled = True
									btnRefresh.Enabled = True
									btnActivity.Enabled = True
									btnDrivewayNewClip.Enabled = True
									btnFrontDoorNewClip.Enabled = True
									btnSideYardNewClip.Enabled = True
									Return Null
								Else
									i = 1
								End If
								Log("*********** HERE TWO ***********")
								Dim rs As ResumableSub = GetCommandID(response)
								wait for (rs) complete (Result As Object)
					
								Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
								wait for (rs) complete (Result As Object)
							End If

						Next
						If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Then
							btnDriveway.Enabled = True
							btnRefresh.Enabled = True
							btnActivity.Enabled = True
							btnDrivewayNewClip.Enabled = True
							btnFrontDoorNewClip.Enabled = True
							btnSideYardNewClip.Enabled = True
							Return Null
						else If commandComplete = False Then
							If camera = "347574" Then
								lblStatus.Text = "Failed to retrieve Driveway thumbnail..."
							Else If camera = "236967" Then
								lblStatus.Text = "Failed to retrieve Front Door thumbnail..."
							Else If camera = "458236" Then
								lblStatus.Text = "Failed to retrieve Side Yard thumbnail..."
							End If
						End If
					End If
				End If
			End If
		Next
'		If FirstRun = False Then
'			btnRefresh_Click
'		End If
		lblStatus.Text = "Ready"
	Catch
		response = "ERROR: " & LastException
		Log("RefreshCamera LastException: " & LastException)
	End Try
	btnDriveway.Enabled = True
	btnRefresh.Enabled = True
	btnActivity.Enabled = True
	btnDrivewayNewClip.Enabled = True
	btnFrontDoorNewClip.Enabled = True
	btnSideYardNewClip.Enabled = True
	If lblSideYard.Text.Contains("OFFLINE") Then
		lblSideYard.Text = sideyardArmedStatus
		BlurIV("SideYard.jpg",ivSideYard)
	Else if lblDriveway.Text.Contains("OFFLINE") Then
		lblDriveway.Text = drivewayArmedStatus
		BlurIV("Driveway.jpg",ivDriveway)
	Else if lblFrontDoor.Text.Contains("OFFLINE") Then
		lblFrontDoor.Text = frontdoorArmedStatus
		BlurIV("FrontDoor.jpg",ivFrontDoor)
	End If
	Return Null
End Sub

Sub GetCommandResponse(iv As ImageView,clv As CustomListView,camera As String, attempts As String, attemptsAllowed As String) As ResumableSub
	Dim rs As ResumableSub = GetCommandStatus(response)
	wait for (rs) complete (Result As Object)
	If commandComplete Then
		
		Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/" & camera)
		wait for (rs) complete (Result As Object)
		'File.WriteString(File.DirApp,"response_camera_complete.txt",response)
		Dim rs As ResumableSub = GetCameraInfo(response,clv)
		wait for (rs) complete (Result As Object)
		
		Dim rs As ResumableSub = DownloadImage("https://rest-" & userRegion &".immedia-semi.com/" & cameraThumbnail & ".jpg",iv,camera)
		wait for (rs) complete (Result As Object)

		Return True
	End If

	Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/" & camera)
	wait for (rs) complete (Result As Object)
				
	'File.WriteString(File.DirApp,"response_camera.txt",response)
	Dim rs As ResumableSub = GetCameraInfo(response,Null)
	wait for (rs) complete (Result As Object)
	
	If prevCameraThumbnail <> "" And prevCameraThumbnail <> cameraThumbnail Then
		Log("**** ALRIGHT " & attempts & "/" & attemptsAllowed & " *****")
		Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/" & camera)
		wait for (rs) complete (Result As Object)
		'File.WriteString(File.DirApp,"response_camera_complete.txt",response)
		Dim rs As ResumableSub = GetCameraInfo(response,clv)
		wait for (rs) complete (Result As Object)
		
		Dim rs As ResumableSub = DownloadImage("https://rest-" & userRegion &".immedia-semi.com/" & cameraThumbnail & ".jpg",iv,camera)
		wait for (rs) complete (Result As Object)

		Return True
	Else
		If camera = "347574" Then
			lblStatus.Text = "Awaiting for the Driveway thumbnail... " & attempts & "/" & attemptsAllowed
		Else If camera = "236967" Then
			lblStatus.Text = "Awaiting for the Front Door thumbnail...  " & attempts & "/" & attemptsAllowed
		Else If camera = "458236" Then
			lblStatus.Text = "Awaiting for the Side Yard thumbnail... " & attempts & "/" & attemptsAllowed
		End If
		Return False
	End If
End Sub

Sub RESTGet(url As String) As ResumableSub
	Try
		Dim j As HttpJob
		response = ""
		j.Initialize("", Me) 'name is empty as it is no longer needed
		j.Download(url)
		j.GetRequest.SetHeader("TOKEN_AUTH", authToken)
		Wait For (j) JobDone(j As HttpJob)
		If j.Success Then
			response = j.GetString
		Else
			response = "ERROR: " & j.ErrorMessage
			lblStatus.Text = GetRESTError(j.ErrorMessage)
		End If
		If response.Contains("System is busy, please wait") Then
			lblStatus.Text = "System is busy, please wait"
		End If
		j.Release
	Catch
		response = "ERROR: " & LastException
		Log("RESTGet LastException: " & LastException)
	End Try
	Log("URL: " & url)
	Log("Response: " & response)
	Return Null
End Sub

Sub RESTPost(url As String) As ResumableSub
	Try
		Dim j As HttpJob
		response = ""
		j.Initialize("", Me) 'name is empty as it is no longer needed
		j.PostString(url,"")
		j.GetRequest.SetContentType("application/x-www-form-urlencoded")
		j.GetRequest.SetHeader("TOKEN_AUTH", authToken)
		Wait For (j) JobDone(j As HttpJob)
		If j.Success Then
			response = j.GetString
		Else
			response = "ERROR: " & j.ErrorMessage
			lblStatus.Text = GetRESTError(j.ErrorMessage)
		End If
		If response.Contains("System is busy, please wait") Then
			lblStatus.Text = "System is busy, please wait"
		End If
		j.Release
	Catch
		response = "ERROR: " & LastException
		Log("RESTPost LastException: " & LastException)
	End Try
	Log("URL: " & url)
	Log("Response: " & response)
	Return Null
End Sub

Sub DownloadImage (Link As String, iv As ImageView, camera As String) As ResumableSub
	Try
		Dim j As HttpJob
		response = ""
		j.Initialize("", Me)
		j.Download(Link)
		j.GetRequest.SetHeader("TOKEN_AUTH", authToken)
		Wait For (j) JobDone(j As HttpJob)
		If j.Success Then
			' Save to a JPG file
			If camera = "347574" Then
				Dim out As OutputStream = File.OpenOutput(File.DirApp, "Driveway.jpg", False)
			Else If camera = "236967" Then
				Dim out As OutputStream = File.OpenOutput(File.DirApp, "FrontDoor.jpg", False)
			Else If camera = "458236" Then
				Dim out As OutputStream = File.OpenOutput(File.DirApp, "SideYard.jpg", False)
			End If
			File.Copy2(j.GetInputStream, out)
			out.Close '<------ very important
			
			' Display in ImageView
			iv.SetImage(j.GetBitmap)
		Else
			response = "ERROR: " & j.ErrorMessage
			lblStatus.Text = GetRESTError(j.ErrorMessage)
		End If
		j.Release
	Catch
		Log(LastException)
	End Try
	Return Null
End Sub


Sub GetAuthInfo(json As String)
	Try
		lblStatus.Text = "Getting authtoken..."
		Dim parser As JSONParser
		parser.Initialize(json)
		Dim root As Map = parser.NextObject
		Dim authtokenmap As Map = root.Get("authtoken")
		authToken = authtokenmap.Get("authtoken")
		Log("authToken: " &  authToken)
'	Dim message As String = authtoken.Get("message")
'	Dim client As Map = root.Get("client")
'	Dim id As Int = client.Get("id")
		Dim networks As Map = root.Get("networks")
		Log("networkID: " & networks.GetKeyAt(0))
		networkID = networks.GetKeyAt(0)
'	Dim 94896 As Map = networks.Get("94896")
'	Dim onboarded As String = 94896.Get("onboarded")
'	Dim name As String = 94896.Get("name")
		Dim region As Map = root.Get("region")
		userRegion = region.GetKeyAt(0)
		Log("userRegion: " &  userRegion)
'	Dim u006 As String = region.Get("u006")
'	Dim account As Map = root.Get("account")
'	Dim id As Int = account.Get("id")
	Catch
		Log(LastException)
	End Try

End Sub

Sub GetCommandID(json As String) As ResumableSub
	Try
		Dim parser As JSONParser
		parser.Initialize(json)
		Dim root As Map = parser.NextObject
'	Dim server As String = root.Get("server")
'	Dim stage_vs As String = root.Get("stage_vs")
'	Dim firmware_id As String = root.Get("firmware_id")
'	Dim stage_rest As String = root.Get("stage_rest")
'	Dim created_at As String = root.Get("created_at")
'	Dim stage_cs_db As String = root.Get("stage_cs_db")
'	Dim sm_ack As String = root.Get("sm_ack")
'	Dim duration As String = root.Get("duration")
'	Dim stage_is As String = root.Get("stage_is")
'	Dim stage_cs_sent As String = root.Get("stage_cs_sent")
'	Dim updated_at As String = root.Get("updated_at")
'	Dim stage_dev As String = root.Get("stage_dev")
'	Dim execute_time As String = root.Get("execute_time")
'	Dim by_whom As String = root.Get("by_whom")
		commandID = root.Get("id")
		Log("commandID: " & commandID)
'	Dim diagnostic As String = root.Get("diagnostic")
'	Dim player_transaction As String = root.Get("player_transaction")
'	Dim attempts As Int = root.Get("attempts")
'	Dim lfr_ack As String = root.Get("lfr_ack")
'	Dim stage_sm As String = root.Get("stage_sm")
'	Dim debug As String = root.Get("debug")
'	Dim state_stage As String = root.Get("state_stage")
'	Dim camera_id As Int = root.Get("camera_id")
'	Dim target_id As Int = root.Get("target_id")
'	Dim command As String = root.Get("command")
'	Dim target As String = root.Get("target")
'	Dim stage_lv As String = root.Get("stage_lv")
'	Dim sequence As String = root.Get("sequence")
'	Dim network_id As Int = root.Get("network_id")
'	Dim account_id As Int = root.Get("account_id")
'	Dim state_condition As String = root.Get("state_condition")
'	Dim siren_id As String = root.Get("siren_id")
'	Dim parent_command_id As String = root.Get("parent_command_id")
'	Dim sync_module_id As Int = root.Get("sync_module_id")
'	Dim transaction As String = root.Get("transaction")
	Catch
		Log(LastException)
	End Try
	Return Null
End Sub

Sub GetCommandStatus(json As String) As ResumableSub
	Try
		Dim parser As JSONParser
		parser.Initialize(json)
		Dim root As Map = parser.NextObject
		commandComplete = root.Get("complete")
		Log("commandComplete: " & commandComplete)
	Catch
		Log(LastException)
	End Try
	Return Null
End Sub

Sub GetRESTError(json As String) As String
	Try
		'ResponseError. Reason: , Response: {"message":"Invalid credentials","code":200}
		'RequestAuthToken LastException: (FileNotFoundException) java.io.FileNotFoundException: /data/user/0/cloyd.smart.home.monitor/cache/1 (No such file or directory)
		'ResponseError. Reason: , Response: <h1>Not Found</h1>
		If json.Contains("<h1>Not Found</h1>") Then
			Return "REST endpoint URL not found. Try again."
		Else
			If json.IndexOf("{") <> -1 Then
				json = json.SubString(json.IndexOf("{"))
				Dim parser As JSONParser
				parser.Initialize(json)
				Dim root As Map = parser.NextObject
				Dim code As Int = root.Get("code")
				Dim message As String = root.Get("message")
				Log("Code: " & code & " Message: " & message)
				Return "Code: " & code & " Message: " & message
			Else
				Return json
			End If
		End If
	Catch
		Log(LastException)
		Return json
	End Try
End Sub

Sub GetCameraInfo(json As String, clv As CustomListView) As ResumableSub
	Try
		Dim parser As JSONParser
		parser.Initialize(json)
		Dim root As Map = parser.NextObject
		Dim camera_status As Map = root.Get("camera_status")
		Dim total_108_wakeups As Int = camera_status.Get("total_108_wakeups")
		Dim battery_voltage As Int = camera_status.Get("battery_voltage")
		Dim light_sensor_data_valid As String = camera_status.Get("light_sensor_data_valid")
		Dim lfr_tb_wakeups As Int = camera_status.Get("lfr_tb_wakeups")
		Dim fw_git_hash As String = camera_status.Get("fw_git_hash")
		Dim wifi_strength As Int = camera_status.Get("wifi_strength")
		Dim lfr_strength As Int = camera_status.Get("lfr_strength")
		Dim total_tb_wakeups As Int = camera_status.Get("total_tb_wakeups")
		Dim created_at As String = camera_status.Get("created_at")
		Dim light_sensor_ch0 As Int = camera_status.Get("light_sensor_ch0")
		Dim mac As String = camera_status.Get("mac")
		Dim unit_number As Int = camera_status.Get("unit_number")
		Dim updated_at As String = camera_status.Get("updated_at")
		Dim light_sensor_ch1 As Int = camera_status.Get("light_sensor_ch1")
		Dim time_dhcp_lease As Int = camera_status.Get("time_dhcp_lease")
		Dim temperature As Int = camera_status.Get("temperature")
		Dim time_first_video As Int = camera_status.Get("time_first_video")
		Dim time_dns_resolve As Int = camera_status.Get("time_dns_resolve")
		Dim id As Int = camera_status.Get("id")
		Dim temp_alert_status As String = camera_status.Get("temp_alert_status")
		Dim time_108_boot As Int = camera_status.Get("time_108_boot")
		Dim lfr_108_wakeups As Int = camera_status.Get("lfr_108_wakeups")
		cameraThumbnail = camera_status.Get("thumbnail")
		Dim lifetime_duration As Int = camera_status.Get("lifetime_duration")
		Dim wifi_connect_failure_count As Int = camera_status.Get("wifi_connect_failure_count")
		Dim camera_id As Int = camera_status.Get("camera_id")
		Dim battery_alert_status As String = camera_status.Get("battery_alert_status")
		Dim dhcp_failure_count As Int = camera_status.Get("dhcp_failure_count")
		Dim ip_address As String = camera_status.Get("ip_address")
		Dim ipv As String = camera_status.Get("ipv")
		Dim light_sensor_data_new As String = camera_status.Get("light_sensor_data_new")
		Dim network_id As Int = camera_status.Get("network_id")
		Dim account_id As Int = camera_status.Get("account_id") '88438
		Dim serial As String = camera_status.Get("serial")
		Dim dev_1 As Int = camera_status.Get("dev_1")
		Dim time_wlan_connect As Int = camera_status.Get("time_wlan_connect")
		Dim dev_2 As Int = camera_status.Get("dev_2")
		Dim socket_failure_count As Int = camera_status.Get("socket_failure_count")
		Dim dev_3 As Int = camera_status.Get("dev_3")
		Dim pir_rejections As Int = camera_status.Get("pir_rejections")
		Dim sync_module_id As Int = camera_status.Get("sync_module_id")
		Dim lifetime_count As Int = camera_status.Get("lifetime_count")
		Dim error_codes As Int = camera_status.Get("error_codes")
		Dim fw_version As String = camera_status.Get("fw_version")
		Dim ac_power As String = camera_status.Get("ac_power")
		
		If clv = Null Then
			Return Null
		End If
		clv.Clear
		clv.AddTextItem("Battery voltage: " & NumberFormat((battery_voltage / 100),0,2) & "V", "battery_voltage") '& "V - " & CheckBattLife(battery_voltage), "battery_voltage")
		clv.AddTextItem("Camera to WiFi strength: " & wifi_strength & " dBm - " & CheckLFRLevel(wifi_strength), "wifi_strength")
		clv.AddTextItem("Camera to Sync Module strength (LFR): " & lfr_strength & " dBm - " & CheckLFRLevel(lfr_strength), "lfr_strength")
		clv.AddTextItem("Temperature: " & temperature & "ºF", "temperature")
		clv.AddTextItem("Firmware version: " & fw_version, "fw_version")
		clv.AddTextItem("Firmware Git Hash: " & fw_git_hash, "fw_git_hash")
		clv.AddTextItem("Battery alert status: " & battery_alert_status, "battery_alert_status")
		clv.AddTextItem("Temperature alert status: " & temp_alert_status, "temp_alert_status")
		clv.AddTextItem("Updated at: " & ConvertDateTimePlain(updated_at), "updated_at")
		clv.AddTextItem("Created at: " & ConvertDateTimePlain(created_at), "created_at")
		clv.AddTextItem("IP address: " & ip_address, "ip_address")
		clv.AddTextItem("MAC address: " & mac, "mac")
		clv.AddTextItem("Camera ID: " & camera_id, "camera_id")
		clv.AddTextItem("Serial: " & serial, "serial")
		clv.AddTextItem("Network ID: " & network_id, "network_id")
		clv.AddTextItem("Account ID: " & account_id, "account_id")
		clv.AddTextItem("ID: " & id, "id")
		clv.AddTextItem("Sync Module ID: " & sync_module_id, "sync_module_id")
		clv.AddTextItem("Light sensor data valid: " & light_sensor_data_valid, "light_sensor_data_valid")
		clv.AddTextItem("DHCP failure count: " & dhcp_failure_count, "dhcp_failure_count")
		clv.AddTextItem("LFR tb wakeups: " & lfr_tb_wakeups, "lfr_tb_wakeups")
		clv.AddTextItem("Socket failure count: " & socket_failure_count, "socket_failure_count")
		clv.AddTextItem("Camera thumbnail: " & cameraThumbnail, "thumbnail")
		clv.AddTextItem("WiFi connect failure count: " & wifi_connect_failure_count, "wifi_connect_failure_count")
		clv.AddTextItem("Error codes: " & error_codes, "error_codes")
		clv.AddTextItem("AC power: " & ac_power, "ac_power")
		clv.AddTextItem("Total 108 wakeups: " & total_108_wakeups, "total_108_wakeups")
		clv.AddTextItem("Total Tb wakeups: " & total_tb_wakeups, "total_tb_wakeups")
		clv.AddTextItem("Light sensor ch0: " & light_sensor_ch0, "light_sensor_ch0")
		clv.AddTextItem("Unit number: " & unit_number, "unit_number")
		clv.AddTextItem("Light sensor ch1: " & light_sensor_ch1, "light_sensor_ch1")
		clv.AddTextItem("Time dhcp lease: " & time_dhcp_lease, "time_dhcp_lease")
		clv.AddTextItem("Time first video: " & time_first_video, "time_first_video")
		clv.AddTextItem("Time dns resolve: " & time_dns_resolve, "time_dns_resolve")
		clv.AddTextItem("Time 108 boot: " & time_108_boot, "time_108_boot")
		clv.AddTextItem("LFR 108 wakeups: " & lfr_108_wakeups, "lfr_108_wakeups")
		clv.AddTextItem("lifetime duration: " & lifetime_duration, "lifetime_duration")
		clv.AddTextItem("lpv: " & ipv, "ipv")
		clv.AddTextItem("light sensor data new: " & light_sensor_data_new, "light_sensor_data_new")
		clv.AddTextItem("Dev_1: " & dev_1, "dev_1")
		clv.AddTextItem("Dev_2: " & dev_2, "dev_2")
		clv.AddTextItem("Dev_3: " & dev_3, "dev_3")
		clv.AddTextItem("Time wlan connect: " & time_wlan_connect, "time_wlan_connect")
		clv.AddTextItem("PIR rejections: " & pir_rejections, "pir_rejections")
		clv.AddTextItem("Lifetime count: " & lifetime_count, "lifetime_count")

		Dim strTimestamp As String
		strTimestamp = ConvertDateTime(updated_at)
		lblStatus.Text = "Last updated: " & strTimestamp
		If clv = clvDriveway Then
			lblDriveway.Text = strTimestamp & " " & drivewayArmedStatus
			prevDrivewayUpdateTime = updated_at
		Else If clv = clvFrontDoor Then
			lblFrontDoor.Text = strTimestamp & " " & frontdoorArmedStatus
			lblDriveway.Text = ConvertDateTime(prevDrivewayUpdateTime) & " " & drivewayArmedStatus
			prevFrontDoorUpdateTime = updated_at
		Else If clv = clvSideYard Then
			lblSideYard.Text = strTimestamp & " " & sideyardArmedStatus
			lblDriveway.Text = ConvertDateTime(prevDrivewayUpdateTime) & " " & drivewayArmedStatus
			lblFrontDoor.Text = ConvertDateTime(prevFrontDoorUpdateTime) & " " & frontdoorArmedStatus
		End If
		
		For i = 0 To clv.Size-1
			Dim item As String
			item = clv.GetValue(i)
			If item.Contains("thumbnail") Then
				clv.ResizeItem(i,80dip)
			Else If item.Contains("_strength") Then
				clv.ResizeItem(i,45dip)
			Else
				clv.ResizeItem(i,35dip)
			End If
		Next
	Catch
		Log(LastException)
	End Try
	Return Null
End Sub

Sub GetSyncModuleInfo(json As String) As ResumableSub
	Try
		Dim parser As JSONParser
		parser.Initialize(json)
		Dim root As Map = parser.NextObject
		Dim syncmodule As Map = root.Get("syncmodule")
'	Dim onboarded As String = syncmodule.Get("onboarded")
'	Dim server As String = syncmodule.Get("server")
'	Dim feature_plan_id As String = syncmodule.Get("feature_plan_id")
		Dim wifi_strength As Int = syncmodule.Get("wifi_strength")
		Dim os_version As String = syncmodule.Get("os_version")
'	Dim created_at As String = syncmodule.Get("created_at")
'	Dim ip_address As String = syncmodule.Get("ip_address")
'	Dim table_update_sequence As Int = syncmodule.Get("table_update_sequence")
'	Dim lfr_frequency As String = syncmodule.Get("lfr_frequency")
'	Dim last_wifi_alert As String = syncmodule.Get("last_wifi_alert")
'	Dim offline_alert_count As Int = syncmodule.Get("offline_alert_count")
'	Dim last_hb As String = syncmodule.Get("last_hb")
'	Dim network_id As Int = syncmodule.Get("network_id")
'	Dim last_activity As String = syncmodule.Get("last_activity")
'	Dim account_id As Int = syncmodule.Get("account_id") '88438
'	Dim updated_at As String = syncmodule.Get("updated_at")
'	Dim serial As String = syncmodule.Get("serial")
'	Dim mac_address As String = syncmodule.Get("mac_address")
'	Dim wifi_alert_count As Int = syncmodule.Get("wifi_alert_count")
'	Dim name As String = syncmodule.Get("name")
'	Dim id As Int = syncmodule.Get("id")
		Dim fw_version As String = syncmodule.Get("fw_version")
'	Dim last_offline_alert As String = syncmodule.Get("last_offline_alert")
		Dim status As String = syncmodule.Get("status")
		lblSyncModule.Text = "Sync Module is " & status & CRLF & "Wifi Strength: " & wifi_strength & " bars" & CRLF & "Firmware version: " & fw_version & CRLF & "OS version: " & os_version
		
		If status = "online" Then
			ivSyncModule.SetImage(fx.LoadImage(File.DirAssets,"systemstatusonline.png"))
		Else
			ivSyncModule.SetImage(fx.LoadImage(File.DirAssets,"systemstatusoffline.png"))
		End If
		
		If wifi_strength = "5" Then
			ivSyncModuleWiFi.SetImage(fx.LoadImage(File.DirAssets,"bars5blue.png"))
		Else If wifi_strength = "4" Then
			ivSyncModuleWiFi.SetImage(fx.LoadImage(File.DirAssets,"bars4blue.png"))
		Else If wifi_strength = "3" Then
			ivSyncModuleWiFi.SetImage(fx.LoadImage(File.DirAssets,"bars3blue.png"))
		Else If wifi_strength = "2" Then
			ivSyncModuleWiFi.SetImage(fx.LoadImage(File.DirAssets,"bars2blue.png"))
		Else If wifi_strength = "1" Then
			ivSyncModuleWiFi.SetImage(fx.LoadImage(File.DirAssets,"bars1blue.png"))
		Else
			ivSyncModuleWiFi.SetImage(fx.LoadImage(File.DirAssets,"bars_0bars.png"))
		End If
	Catch
		Log(LastException)
	End Try
	Return Null
End Sub

Sub GetHomescreen(json As String) As ResumableSub
	Try
		Dim parser As JSONParser
		parser.Initialize(json)
		Dim root As Map = parser.NextObject
		Dim devices As List = root.Get("devices")
		For Each coldevices As Map In devices
			Dim battery_state As String = coldevices.Get("battery_state")
'			Dim thumbnail As String = coldevices.Get("thumbnail")
'			'Dim temp As Int = coldevices.Get("temp")
'			Dim error_msg As String = coldevices.Get("error_msg")
			Dim device_id As Int = coldevices.Get("device_id")
'			Dim wifi_strength As Int = coldevices.Get("wifi_strength")
'			Dim lfr_strength As Int = coldevices.Get("lfr_strength")
			Dim active As String = coldevices.Get("active")
			
			Dim device_type As String = coldevices.Get("device_type")
			If device_type <> "camera" Then 
				Continue
			End If
			
'			Dim Type As String = coldevices.Get("type")
			Dim battery As Int = coldevices.Get("battery")
			Dim enabled As String = coldevices.Get("enabled")
'			Dim updated_at As String = coldevices.Get("updated_at")
'			Dim usage_rate As String = coldevices.Get("usage_rate")
'			Dim armed As String = coldevices.Get("armed")
'			Dim name As String = coldevices.Get("name")
'			Dim warning As Int = coldevices.Get("warning")
'			Dim notifications As Int = coldevices.Get("notifications")
'			Dim errors As Int = coldevices.Get("errors")
			
			
			Dim status As String = coldevices.Get("status")
			
			If device_id = "347574" Then
				If battery > 1 And battery_state = "ok" Then
					If active = "armed" Then
						If enabled = "true" Then
							drivewayArmedStatus = "[Level " & battery & " - " & battery_state.ToUpperCase & "]"
							lblDriveway.Style = ""
						Else
							drivewayArmedStatus = "MOTION DETECTION IS DISABLED!"
							lblDriveway.Style = "-fx-effect: dropshadow( gaussian , rgba(255,0,0,255) , 0,0,0,1 );"
						End If
					Else
						drivewayArmedStatus = "CAMERA NOT ARMED!"
						lblDriveway.Style = "-fx-effect: dropshadow( gaussian , rgba(255,0,0,255) , 0,0,0,1 );"
					End If
				Else
					drivewayArmedStatus = "[Level " & battery & " - " & battery_state.ToUpperCase & "]"
					If drivewayArmedStatus = "[Level 1 - LOW]" Then
						drivewayArmedStatus = "[REPLACE]"
					End If
					lblDriveway.Style = "-fx-effect: dropshadow( gaussian , rgba(255,0,0,255) , 0,0,0,1 );"
				End If
				If status = "offline" Then
					drivewayArmedStatus = "[Level " & battery & " - " & battery_state.ToUpperCase & " OFFLINE]"
					lblDriveway.Style = "-fx-effect: dropshadow( gaussian , rgba(255,0,0,255) , 0,0,0,1 );"
					BlurIV("Driveway.jpg",ivDriveway)
				End If
			Else If device_id = "236967" Then
				If battery > 1 And battery_state = "ok" Then
					If active = "armed" Then
						If enabled = "true" Then
							frontdoorArmedStatus = "[Level " & battery & " - " & battery_state.ToUpperCase & "]"
							lblFrontDoor.Style = ""
						Else
							frontdoorArmedStatus = "MOTION DETECTION IS DISABLED!"
							lblFrontDoor.Style = "-fx-effect: dropshadow( gaussian , rgba(255,0,0,255) , 0,0,0,1 );"
						End If
					Else
						frontdoorArmedStatus = "CAMERA NOT ARMED!"
						lblFrontDoor.Style = "-fx-effect: dropshadow( gaussian , rgba(255,0,0,255) , 0,0,0,1 );"
					End If
				Else
					frontdoorArmedStatus = "[Level " & battery & " - " & battery_state.ToUpperCase & "]"
					If frontdoorArmedStatus = "[Level 1 - LOW]" Then
						frontdoorArmedStatus = "[REPLACE]"
					End If
					lblFrontDoor.Style = "-fx-effect: dropshadow( gaussian , rgba(255,0,0,255) , 0,0,0,1 );"
				End If
				If status = "offline" Then
					frontdoorArmedStatus = "[Level " & battery & " - " & battery_state.ToUpperCase & " OFFLINE]"
					lblFrontDoor.Style = "-fx-effect: dropshadow( gaussian , rgba(255,0,0,255) , 0,0,0,1 );"
					BlurIV("FrontDoor.jpg",ivFrontDoor)
				End If
			Else If device_id = "458236" Then
				If battery > 1 And battery_state = "ok" Then
					If active = "armed" Then
						If enabled = "true" Then
							sideyardArmedStatus = "[Level " & battery & " - " & battery_state.ToUpperCase & "]"
							lblSideYard.Style = ""
						Else
							sideyardArmedStatus = "MOTION DETECTION IS DISABLED!"
							lblSideYard.Style = "-fx-effect: dropshadow( gaussian , rgba(255,0,0,255) , 0,0,0,1 );"
						End If
					Else
						sideyardArmedStatus = "CAMERA NOT ARMED!"
						lblSideYard.Style = "-fx-effect: dropshadow( gaussian , rgba(255,0,0,255) , 0,0,0,1 );"
					End If
				Else
					sideyardArmedStatus = "[Level " & battery & " - " & battery_state.ToUpperCase & "]"
					If sideyardArmedStatus = "[Level 1 - LOW]" Then
						sideyardArmedStatus = "[REPLACE]"
					End If
					lblSideYard.Style = "-fx-effect: dropshadow( gaussian , rgba(255,0,0,255) , 0,0,0,1 );"
				End If
				If status = "offline" Then
					sideyardArmedStatus = "[Level " & battery & " - " & battery_state.ToUpperCase & " OFFLINE]"
					lblSideYard.Style = "-fx-effect: dropshadow( gaussian , rgba(255,0,0,255) , 0,0,0,1 );"
					BlurIV("SideYard.jpg",ivSideYard)
				End If
			End If
		Next
		
'		Dim account As Map = root.Get("account")
'		Dim notifications As Int = account.Get("notifications")
		Dim network As Map = root.Get("network")
'		Dim enable_temp_alerts As String = network.Get("enable_temp_alerts")
'		Dim error_msg As String = network.Get("error_msg")
'		Dim wifi_strength As Int = network.Get("wifi_strength")
		Dim armedNetwork As String = network.Get("armed")
'		Dim name As String = network.Get("name")
'		Dim warning As Int = network.Get("warning")
'		Dim notifications As Int = network.Get("notifications")
'		Dim status As String = network.Get("status")
		
		swArmed.Value = armedNetwork
		
		If armedNetwork <> "true" Then
			drivewayArmedStatus = "SYSTEM NOT ARMED!"
			lblDriveway.Style = "-fx-effect: dropshadow( gaussian , rgba(255,0,0,255) , 0,0,0,1 );"
			
			frontdoorArmedStatus = "SYSTEM NOT ARMED!"
			lblFrontDoor.Style = "-fx-effect: dropshadow( gaussian , rgba(255,0,0,255) , 0,0,0,1 );"
			
			sideyardArmedStatus = "SYSTEM NOT ARMED!"
			lblSideYard.Style = "-fx-effect: dropshadow( gaussian , rgba(255,0,0,255) , 0,0,0,1 );"
		End If
	Catch
		Log(LastException)
	End Try
	Return Null
End Sub

Sub CheckLFRLevel(lfrlevel As Int) As String
	Try
		' https://www.metageek.com/training/resources/wifi-signal-strength-basics.html
		If lfrlevel > -67 Then
			Return "Amazing"
		else If lfrlevel > -70 And lfrlevel <= -67 Then
			Return "Very good"
		else If lfrlevel > -80 And lfrlevel <= -70 Then
			Return "OK"
		else If lfrlevel > -90 And lfrlevel <= -80 Then
			Return "Not Good"
		Else
			Return "Unusable"
		End If
	Catch
		Log(LastException)
		Return ""
	End Try
End Sub

Private Sub lbTitle_MouseDragged (EventData As MouseEvent)
	Try
		If isMaximized Then Return
		Dim jo As JavaObject = EventData
		MainForm.WindowLeft = jo.RunMethod("getScreenX", Null) - xMouse
		MainForm.WindowTop = jo.RunMethod("getScreenY", Null) - yMouse
	Catch
		Log(LastException)
	End Try
End Sub

Private Sub lbTitle_MousePressed (EventData As MouseEvent)
	Try
		xMouse = EventData.X + lbTitle.Left + 15
		yMouse = EventData.Y + lbTitle.Top + 15
	Catch
		Log(LastException)
	End Try
End Sub

Private Sub ivClose_MouseClicked (EventData As MouseEvent)
	File.Delete(File.DirApp, "Driveway.jpg")
	File.Delete(File.DirApp, "FrontDoor.jpg")
	File.Delete(File.DirApp, "SideYard.jpg")
	File.Delete(File.DirApp,"screenshot.jpg")
	File.Delete(File.DirApp,"media.mp4")
	ExitApplication
End Sub

Sub MainForm_CloseRequest (EventData As Event)
	File.Delete(File.DirApp, "Driveway.jpg")
	File.Delete(File.DirApp, "FrontDoor.jpg")
	File.Delete(File.DirApp, "SideYard.jpg")
	File.Delete(File.DirApp,"screenshot.jpg")
	File.Delete(File.DirApp,"media.mp4")
End Sub

Private Sub Close_Entered_Event(e As Event)
	Try
		ivClose.SetImage(fx.LoadImage(File.DirAssets, imgInit & "_btCloseEnt.png"))
	Catch
		Log(LastException)
	End Try
End Sub

Private Sub Close_Exited_Event(e As Event)
	Try
		ivClose.SetImage(fx.LoadImage(File.DirAssets, imgInit & "_btClose.png"))
	Catch
		Log(LastException)
	End Try
End Sub

Private Sub ivMax_MouseClicked (EventData As MouseEvent)

End Sub

Private Sub Max_Entered_Event(e As Event)
	Try
		ivMax.SetImage(fx.LoadImage(File.DirAssets, imgInit & "_btMaxEnt.png"))
	Catch
		Log(LastException)
	End Try
End Sub

Private Sub Max_Exited_Event(e As Event)
	Try
		ivMax.SetImage(fx.LoadImage(File.DirAssets, imgInit & "_btMax.png"))
	Catch
		Log(LastException)
	End Try
End Sub

Private Sub ivMin_MouseClicked (EventData As MouseEvent)
	Try
		Dim jmf As JavaObject = MainForm
		Dim stage As JavaObject = jmf.GetField("stage")
		stage.RunMethod("setIconified", Array As Object(True))
	Catch
		Log(LastException)
	End Try
End Sub

Private Sub Min_Entered_Event(e As Event)
	Try
		ivMin.SetImage(fx.LoadImage(File.DirAssets, imgInit & "_btMinEnt.png"))
	Catch
		Log(LastException)
	End Try
End Sub

Private Sub Min_Exited_Event(e As Event)
	Try
		ivMin.SetImage(fx.LoadImage(File.DirAssets, imgInit & "_btMin.png"))
	Catch
		Log(LastException)
	End Try
End Sub

Public Sub Get_css
	Try
		Dim jForm As JavaObject = MainForm
		Dim scene As JavaObject = jForm.GetField("scene")
		Dim stylesheets As List = scene.RunMethod("getStylesheets", Null)
		stylesheets.Clear
		stylesheets.Add(File.GetUri(File.DirAssets, imgInit & ".css"))
	Catch
		Log(LastException)
	End Try
End Sub

Sub CheckMonitor() As Screen
	Try
		If fx.Screens.Size= 1 Then
			Dim SList As List = fx.Screens
			Dim S As Screen = SList.Get(0)
			'Msgbox.Show("Minimum X: " & S.MinX,"Screen")
			Return S
		Else If fx.Screens.Size> 1 Then
			Dim SList As List = fx.Screens
			Dim S As Screen = SList.Get(2)
			'Msgbox.Show("Minimum X: " & S.MinX,"Screen")
			Return S
		Else
			Dim SList As List = fx.Screens
			Dim S As Screen = SList.Get(0)
			'Msgbox.Show("Minimum X: " & S.MinX,"Screen")
			Return S
		End If
	Catch
		Dim SList As List = fx.Screens
		Dim S As Screen = SList.Get(0)
		'Msgbox.Show("Minimum X: " & S.MinX,"Screen")
		Return S
	End Try
End Sub

Sub clvSideYard_ItemClick (Index As Int, Value As Object)
	Try
		clvDriveway.JumpToItem(Index)
		clvFrontDoor.JumpToItem(Index)
		clvSideYard.JumpToItem(Index)
	Catch
		Log(LastException)
	End Try
End Sub

Sub clvFrontDoor_ItemClick (Index As Int, Value As Object)
	Try
		clvDriveway.JumpToItem(Index)
		clvFrontDoor.JumpToItem(Index)
		clvSideYard.JumpToItem(Index)
	Catch
		Log(LastException)
	End Try
End Sub

Sub clvDriveway_ItemClick (Index As Int, Value As Object)
	Try
		clvDriveway.JumpToItem(Index)
		clvFrontDoor.JumpToItem(Index)
		clvSideYard.JumpToItem(Index)
	Catch
		Log(LastException)
	End Try
End Sub

Sub ivDriveway_MouseClicked (EventData As MouseEvent)
	Dim mf As frmMedia
	mf.Initialize(MainForm)
	mf.timestamp = lblDriveway.Text
	mf.url=$"
	   <h1>${lblDriveway.Text}</h1>
	   <img src="${File.GetUri(File.DirApp, "Driveway.jpg")}"/>
	
	"$
	mf.Show
	Return

'	Dim shadow As JavaObject = lblDriveway
'	shadow.InitializeNewInstance ("javafx.scene.effect.DropShadow",)
'	Dim offsetX = 3, offsetY = 3, radius = 5 As Double
'	shadow.RunMethod("setRadius", Array(radius))
'	shadow.RunMethod("setOffsetX", Array As Object(offsetX))
'	shadow.RunMethod("setOffsetY", Array As Object(offsetY))

	''	'***************** TO REQUEST FOR A NEW VIDEO THAT WILL SHOW ON SAM '*****************
'	Try
'		RESTPost("https://rest-" & userRegion & ".immedia-semi.com/network/" & networkID & "/camera/458236/clip")
'		Sleep(1000)
'		GetCommandID(response)
'		RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
'		Sleep(1000)
'		For i = 1 To 30
'			GetCommandStatus(response)
'			If commandComplete Then
'				'RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/458236")
'				Sleep(1000)
'				'GetCameraInfo(response,clvDriveway)
'				'File.WriteString(File.DirApp,"response.txt",response)
'				Sleep(1000)
'				'btnActivity_Click
'				Exit
'			End If
'			RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
'			Sleep(1000)
'		Next
'	Catch
'		Log(LastException)
'	End Try

	''	'***************** TO REQUEST FOR A NEW VIDEO THAT WILL SHOW ON SAM '*****************
	
	'***************** TO GET A LIVE VIEW BUT NO WAY TO SHOW IT AT THIS POINT '*****************
'	' Blink RTSP stream
'	' https://www.getscw.com/decoding/rtsp
'	' Like most battery/cloud cameras Blink does Not support an RTSP stream As the video feed Is directly sent To Cloud servers.
'	RESTPost("https://rest-" & userRegion &".immedia-semi.com/api/v3/networks/94896/cameras/347574/liveview")
'	' {"id":147201291,"server":"immis://35.163.152.226:443/mUJn8-wyeaHTguSQ__IMDS_890039632?client_id=17","duration":300,"device_name":"Side Yard","camera_name":"Side Yard","network_id":94896,"continue_interval":30,"continue_warning":10,"submit_logs":true,"lv_save":true}
'	Sleep(1000)
'	File.WriteString(File.DirApp,"response_live_view.txt",response)
'	Dim commandID As String = GetLiveView(response)
'	RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
'	Sleep(1000)
'	For i = 1 To 30
'		GetCommandStatus(response)
'		If commandComplete Then
'			'RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/458236")
'			Sleep(1000)
'			'GetCameraInfo(response,clvDriveway)
'			File.WriteString(File.DirApp,"response_live_view_response.txt",response)
'			Sleep(1000)
'			Exit
'		End If
'		RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
'		Sleep(1000)
'	Next
	'***************** TO GET A LIVE VIEW BUT NO WAY TO SHOW IT AT THIS POINT '*****************
	
	''	'***************** TO CHECK IF SYNC MODULE AND CAMERAS ARE ARMED '*****************
'	Try
'		RESTGet("https://rest-" & userRegion &".immedia-semi.com/homescreen")
'		' https://rest.prod.immedia-semi.com/homescreen
'		Sleep(1000)
'		File.WriteString(File.DirApp,"response_arm.txt",response)
'	Catch
'		Log(LastException)
'	End Try

	''	'***************** TO CHECK IF SYNC MODULE AND CAMERAS ARE ARMED '*****************
	
	''	'***************** TO ARM THE SYNC MODULE (WILL NOT WORK IF ALL CAMERAS MOTION DETECTION IS DISABLED '*****************
'	Try
'		RESTPost("https://rest-" & userRegion & ".immedia-semi.com/network/" & networkID & "/arm")
'		'ttps://rest.prod.immedia-semi.com/network/*network_id_from_networks_call*/arm
'		'RESTGet("https://rest-" & userRegion &".immedia-semi.com/homescreen")
'		' https://rest.prod.immedia-semi.com/homescreen
'		Sleep(1000)
'		File.WriteString(File.DirApp,"response_arm.txt",response)
'		GetCommandID(response)
'		RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
'		Sleep(1000)
'		For i = 1 To 30
'			GetCommandStatus(response)
'			If commandComplete Then
'				'RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/camera/458236")
'				Sleep(1000)
'				'GetCameraInfo(response,clvDriveway)
'				File.WriteString(File.DirApp,"response_arm_commandcomplete.txt",response)
'				Sleep(1000)
'				Exit
'			End If
'			RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
'			Sleep(1000)
'		Next
'	Catch
'		Log(LastException)
'	End Try

	''	'***************** TO ARM THE SYNC MODULE (WILL NOT WORK IF ALL CAMERAS MOTION DETECTION IS DISABLED '*****************

	''	'***************** Gets information about devices that have connected to the blink service '*****************
'	Try
'		RESTGet("https://rest-" & userRegion &".immedia-semi.com/account/clients")
'		' https://rest.prod.immedia-semi.com/homescreen
'		Sleep(1000)
'		File.WriteString(File.DirApp,"response_clients.txt",response)
'	Catch
'		Log(LastException)
'	End Try

	''	'***************** Gets information about devices that have connected to the blink service '*****************
	
End Sub

Sub GetLiveView(json As String) As String 'ignore
	Try
		Dim parser As JSONParser
		parser.Initialize(json)
		Dim root As Map = parser.NextObject
		Dim duration As Int = root.Get("duration") 'ignore
		Dim server As String = root.Get("server")
		Dim device_name As String = root.Get("device_name") 'ignore
		Dim network_id As Int = root.Get("network_id") 'ignore
		Dim continue_interval As Int = root.Get("continue_interval") 'ignore
		Dim continue_warning As Int = root.Get("continue_warning") 'ignore
		Dim id As Int = root.Get("id")
		Dim submit_logs As String = root.Get("submit_logs") 'ignore
		Dim camera_name As String = root.Get("camera_name") 'ignore
		Dim lv_save As String = root.Get("lv_save") 'ignore
		Log("Liveview: " & server)
'		Dim mp As MediaPlayer
'		mp.Initialize("mp", server.Replace("immis://","rtsp://immis:"))
'		mp.Play
	Catch
		Log(LastException)
	End Try
	Return id
End Sub

Sub ivFrontDoor_MouseClicked (EventData As MouseEvent)
	Dim mf As frmMedia
	mf.Initialize(MainForm)
	mf.timestamp = lblFrontDoor.Text
	mf.url=$"
   <h1>${lblFrontDoor.Text}</h1>
   <img src="${File.GetUri(File.DirApp, "FrontDoor.jpg")}"/>
   
"$
	mf.Show
End Sub

Sub ivSideYard_MouseClicked (EventData As MouseEvent)
	Dim mf As frmMedia
	mf.Initialize(MainForm)
	mf.timestamp = lblSideYard.Text
	mf.url=$"
   <h1>${lblSideYard.Text}</h1>
   <img src="${File.GetUri(File.DirApp, "SideYard.jpg")}"/>
   
"$
	mf.Show
End Sub

Sub BlurIV (image As String,iv As ImageView)
	Try
		Dim bmp As B4XBitmap = xui.LoadBitmapResize(File.DirApp, image, iv.Width, iv.Height, True)
		iv.SetImage(Blur(bmp))
	Catch
		Log(LastException)
	End Try
End Sub

Private Sub Blur (bmp As B4XBitmap) As B4XBitmap
	Try
		Dim bc As BitmapCreator
		Dim ReduceScale As Int = 2
		bc.Initialize(bmp.Width / ReduceScale / bmp.Scale, bmp.Height / ReduceScale / bmp.Scale)
		bc.CopyPixelsFromBitmap(bmp)
		Dim count As Int = 3
		Dim clrs(3) As ARGBColor
		Dim temp As ARGBColor
		Dim m As Int
		For steps = 1 To count
			For y = 0 To bc.mHeight - 1
				For x = 0 To 2
					bc.GetARGB(x, y, clrs(x))
				Next
				SetAvg(bc, 1, y, clrs, temp)
				m = 0
				For x = 2 To bc.mWidth - 2
					bc.GetARGB(x + 1, y, clrs(m))
					m = (m + 1) Mod clrs.Length
					SetAvg(bc, x, y, clrs, temp)
				Next
			Next
			For x = 0 To bc.mWidth - 1
				For y = 0 To 2
					bc.GetARGB(x, y, clrs(y))
				Next
				SetAvg(bc, x, 1, clrs, temp)
				m = 0
				For y = 2 To bc.mHeight - 2
					bc.GetARGB(x, y + 1, clrs(m))
					m = (m + 1) Mod clrs.Length
					SetAvg(bc, x, y, clrs, temp)
				Next
			Next
		Next
	Catch
		Log(LastException)
	End Try
	Return bc.Bitmap
End Sub

Private Sub SetAvg(bc As BitmapCreator, x As Int, y As Int, clrs() As ARGBColor, temp As ARGBColor)
	Try
		temp.Initialize
		For Each c As ARGBColor In clrs
			temp.r = temp.r + c.r
			temp.g = temp.g + c.g
			temp.b = temp.b + c.b
		Next
		temp.a = 255
		temp.r = temp.r / clrs.Length
		temp.g = temp.g / clrs.Length
		temp.b = temp.b / clrs.Length
		bc.SetARGB(x, y, temp)
	Catch
		Log(LastException)
	End Try
End Sub


Sub btnActivity_Click
	btnDriveway.Enabled = False
	btnRefresh.Enabled = False
	btnActivity.Enabled = False
	btnDrivewayNewClip.Enabled = False
	btnFrontDoorNewClip.Enabled = False
	btnSideYardNewClip.Enabled = False
	'RESTGet("https://rest-" & userRegion &".immedia-semi.com/api/v1/accounts/88438/media/changed?since=2019-04-19T23:11:20+0000&page=1") ' <-- only returns videos recorded for less than 24 hour
	
	'https://rest-u006.immedia-semi.com/api/v1/accounts/88438/media/changed?since=-999999999-01-01T00:00:00+18:00&page=1
	Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/api/v1/accounts/88438/media/changed?since=-999999999-01-01T00:00:00+18:00&page=1")
	wait for (rs) complete (Result As Object)
	File.WriteString(File.DirApp,"btnActivity_Click.txt",response)
	If response.StartsWith("{""limit"":25") = False Then
		' https://www.b4x.com/android/forum/threads/b4x-resumable-subs-that-return-values-resumablesub.82670/
		Dim rs As ResumableSub = GetUnwatchedVideos
		wait for (rs) complete (Result As Object)
	End If
	Dim mf As frmActivity
	mf.Initialize(MainForm)
	mf.authToken = authToken
	mf.Show(response,userRegion)

	' https://www.b4x.com/android/forum/threads/b4x-resumable-subs-that-return-values-resumablesub.82670/
	Dim rs As ResumableSub = GetUnwatchedVideos
	wait for (rs) complete (Result As Object)

	btnDriveway.Enabled = True
	btnRefresh.Enabled = True
	btnActivity.Enabled = True
	btnDrivewayNewClip.Enabled = True
	btnFrontDoorNewClip.Enabled = True
	btnSideYardNewClip.Enabled = True
End Sub

Sub ConvertDateTimePlain(inputTime As String) As String
	' https://www.b4x.com/android/forum/threads/convert-utc-to-ticks-and-vice-versa.36592/#content
	Dim ticks As Long = ParseUTCstring(inputTime.Replace("+00:00","+0000"))
	DateTime.DateFormat = "MMM d, yyyy h:mm:ss a"
	Dim lngTicks As Long = ticks
	'Dim p As Period = DateUtils.PeriodBetween(lngTicks,DateTime.now)
	'Log("Time difference: " & p.Days & "d " & p.Hours & "h " & p.Minutes & "m " & p.Seconds & "s")
	Return DateTime.Date(lngTicks)
End Sub

Sub ConvertDateTime(inputTime As String) As String
	' https://www.b4x.com/android/forum/threads/convert-utc-to-ticks-and-vice-versa.36592/#content
	Dim timestampProcessed As String
	timestampProcessed =  ConvertFullDateTime(inputTime)
	
	Dim ticks As Long = ParseUTCstring(inputTime.Replace("+00:00","+0000"))
	DateTime.DateFormat = "MMM d, yyyy h:mm:ss a"
	Dim lngTicks As Long = ticks
	Dim p As Period = DateUtils.PeriodBetween(lngTicks,DateTime.now) 'DateTime.Now

	If timestampProcessed.Contains("Yesterday") Or timestampProcessed.Contains("Today") Then
		If p.Days = 0 Then
			If p.Hours = 0 Then
				If p.Minutes = 0 Then
					Return timestampProcessed & " (" & p.Seconds & "s ago)"
				Else
					Return timestampProcessed & " (" & p.Minutes & "m " & p.Seconds & "s ago)"
				End If
			Else
				Return timestampProcessed & " (" & p.Hours & "h " & p.Minutes & "m " & p.Seconds & "s ago)"
			End If
		else If p.Hours = 0 Then
			If p.Minutes = 0 Then
				Return timestampProcessed & " (" & p.Seconds & "s ago)"
			Else
				Return timestampProcessed & " (" & p.Minutes & "m " & p.Seconds & "s ago)"
			End If
		else If p.Minutes = 0 Then
			Return timestampProcessed & " (" & p.Seconds & "s ago)"
		Else
			Return timestampProcessed & " (" & p.Days & "d " & p.Hours & "h " & p.Minutes & "m " & p.Seconds & "s ago)"
		End If
	Else
		Return timestampProcessed & " (" & p.Days & "d " & p.Hours & "h " & p.Minutes & "m " & p.Seconds & "s ago)"
	End If

End Sub

Sub ConvertFullDateTime(inputTime As String) As String
	' https://www.b4x.com/android/forum/threads/convert-utc-to-ticks-and-vice-versa.36592/#content
	Dim ticks As Long = ParseUTCstring(inputTime.Replace("+00:00","+0000"))
	DateTime.DateFormat = "MMM d, yyyy h:mm:ss a"
	Dim lngTicks As Long = ticks

	Dim Yesterday As Long
	Dim timestamp As Long
	DateTime.DateFormat = "yyyyMMdd"
	Yesterday = DateTime.Date(DateTime.add(DateTime.Now, 0, 0, -1))
	timestamp = DateTime.Date(lngTicks)

	DateTime.DateFormat = "h:mm:ss a"
	If DateUtils.IsSameDay(lngTicks,DateTime.now) Then
		Return "Today " & DateTime.Date(lngTicks)
	Else If Yesterday = timestamp Then
		Return "Yesterday " & DateTime.Date(lngTicks)
	Else
		Return DateUtils.GetDayOfWeekName(lngTicks) & " " & DateTime.Date(lngTicks)
	End If
End Sub

Sub ParseUTCstring(utc As String) As Long
	Dim df As String = DateTime.DateFormat
	Dim res As Long
	If utc.CharAt(10) = "T" Then
		'convert the second format to the first one.
		If utc.CharAt(19) = "." Then utc = utc.SubString2(0, 19) & "+0000"
		DateTime.DateFormat = "yyyy-MM-dd'T'HH:mm:ssZ"
		' 2019-09-20T13:04:05+00:00
	Else
		DateTime.DateFormat = "EEE MMM dd HH:mm:ss Z yyyy"
	End If
	Try
		res = DateTime.DateParse(utc)
	Catch
		res = 0
	End Try
	DateTime.DateFormat = df
	Return res
End Sub

Sub btnRefresh_Click
	btnDriveway.Enabled = False
	btnRefresh.Enabled = False
	btnActivity.Enabled = False
	btnDrivewayNewClip.Enabled = False
	btnFrontDoorNewClip.Enabled = False
	btnSideYardNewClip.Enabled = False
	BlurIV("Driveway.jpg",ivDriveway)
	BlurIV("FrontDoor.jpg",ivFrontDoor)
	BlurIV("SideYard.jpg",ivSideYard)
	
	Dim rs As ResumableSub = RefreshCameras(True, "All")
	wait for (rs) complete (Result As Object)
End Sub

Sub btnDrivewayNewClip_Click
	If fx.Msgbox2(MainForm, "Capture a new video for the Driveway camera?", MainForm.Title, "Yes", "", "No", fx.MSGBOX_CONFIRMATION) = fx.DialogResponse.POSITIVE Then
		Try
			btnDriveway.Enabled = False
			btnRefresh.Enabled = False
			btnActivity.Enabled = False
			btnDrivewayNewClip.Enabled = False
			btnFrontDoorNewClip.Enabled = False
			btnSideYardNewClip.Enabled = False
			lblStatus.Text = "Capturing a new Driveway video clip..."
			
			Dim rs As ResumableSub = RESTPost("https://rest-" & userRegion & ".immedia-semi.com/network/" & networkID & "/camera/347574/clip")
			wait for (rs) complete (Result As Object)
			
			If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Then
				btnDriveway.Enabled = True
				btnRefresh.Enabled = True
				btnActivity.Enabled = True
				btnDrivewayNewClip.Enabled = True
				btnFrontDoorNewClip.Enabled = True
				btnSideYardNewClip.Enabled = True
				btnDrivewayNewClip.Enabled = True
				btnFrontDoorNewClip.Enabled = True
				btnSideYardNewClip.Enabled = True
				lblStatus.Text = response
				Return
			End If
			Dim rs As ResumableSub = GetCommandID(response)
			wait for (rs) complete (Result As Object)
			
			Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
			wait for (rs) complete (Result As Object)
			
			For i = 1 To 70
				Dim rs As ResumableSub = GetCommandStatus(response)
				wait for (rs) complete (Result As Object)
				If commandComplete Then
					For i = 3 To 1 Step -1
						lblStatus.Text = "New Driveway video clip will be shown in " & i & " seconds..."
						Sleep(1000)
					Next
					btnActivity_Click
					Exit
				Else
					lblStatus.Text = "Awaiting for the Driveway video clip... " & i & "/70"
				End If
				Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
				wait for (rs) complete (Result As Object)
				Sleep(1000)
			Next
		Catch
			Log(LastException)
		End Try
		btnDriveway.Enabled = True
		btnRefresh.Enabled = True
		btnActivity.Enabled = True
		btnDrivewayNewClip.Enabled = True
		btnFrontDoorNewClip.Enabled = True
		btnSideYardNewClip.Enabled = True
		lblStatus.Text = "Ready"
	End If
End Sub

Sub btnFrontDoorNewClip_Click
	If fx.Msgbox2(MainForm, "Capture a new video for the Front Door camera?", MainForm.Title, "Yes", "", "No", fx.MSGBOX_CONFIRMATION) = fx.DialogResponse.POSITIVE Then
		Try
			btnDriveway.Enabled = False
			btnRefresh.Enabled = False
			btnActivity.Enabled = False
			btnDrivewayNewClip.Enabled = False
			btnFrontDoorNewClip.Enabled = False
			btnSideYardNewClip.Enabled = False
			lblStatus.Text = "Capturing a new Front Door video clip..."
			
			Dim rs As ResumableSub = RESTPost("https://rest-" & userRegion & ".immedia-semi.com/network/" & networkID & "/camera/236967/clip")
			wait for (rs) complete (Result As Object)
			If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Then
				btnDriveway.Enabled = True
				btnRefresh.Enabled = True
				btnActivity.Enabled = True
				btnDrivewayNewClip.Enabled = True
				btnFrontDoorNewClip.Enabled = True
				btnSideYardNewClip.Enabled = True
				lblStatus.Text = response
				Return
			End If
			
			Dim rs As ResumableSub = GetCommandID(response)
			wait for (rs) complete (Result As Object)
			
			Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
			wait for (rs) complete (Result As Object)
			
			For i = 1 To 70
				Dim rs As ResumableSub = GetCommandStatus(response)
				wait for (rs) complete (Result As Object)
				If commandComplete Then
					For i = 3 To 1  Step -1
						lblStatus.Text = "New Front Door video clip will be shown in " & i & " seconds..."
						Sleep(1000)
					Next
					btnActivity_Click
					Exit
				Else
					lblStatus.Text = "Awaiting for the Front Door video clip... " & i & "/70"
				End If
				Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
				wait for (rs) complete (Result As Object)
				Sleep(1000)
			Next
		Catch
			Log(LastException)
		End Try
		btnDriveway.Enabled = True
		btnRefresh.Enabled = True
		btnActivity.Enabled = True
		btnDrivewayNewClip.Enabled = True
		btnFrontDoorNewClip.Enabled = True
		btnSideYardNewClip.Enabled = True
		lblStatus.Text = "Ready"
	End If
End Sub

Sub btnSideYardNewClip_Click
	If fx.Msgbox2(MainForm, "Capture a new video for the Side Yard camera?", MainForm.Title, "Yes", "", "No", fx.MSGBOX_CONFIRMATION) = fx.DialogResponse.POSITIVE Then
		Try
			btnDriveway.Enabled = False
			btnRefresh.Enabled = False
			btnActivity.Enabled = False
			btnDrivewayNewClip.Enabled = False
			btnFrontDoorNewClip.Enabled = False
			btnSideYardNewClip.Enabled = False
			lblStatus.Text = "Capturing a new Side Yard video clip..."
			Dim rs As ResumableSub = RESTPost("https://rest-" & userRegion & ".immedia-semi.com/network/" & networkID & "/camera/458236/clip")
			wait for (rs) complete (Result As Object)
			If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Then
				btnDriveway.Enabled = True
				btnRefresh.Enabled = True
				btnActivity.Enabled = True
				btnDrivewayNewClip.Enabled = True
				btnFrontDoorNewClip.Enabled = True
				btnSideYardNewClip.Enabled = True
				lblStatus.Text = response
				Return
			End If
			
			Dim rs As ResumableSub = GetCommandID(response)
			wait for (rs) complete (Result As Object)
			
			Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
			wait for (rs) complete (Result As Object)
			
			For i = 1 To 70
				Dim rs As ResumableSub = GetCommandStatus(response)
				wait for (rs) complete (Result As Object)
				If commandComplete Then
					For i = 3 To 1 Step -1
						lblStatus.Text = "New Side Yard video clip will be shown in " & i & " seconds..."
						Sleep(1000)
					Next
					btnActivity_Click
					Exit
				Else
					lblStatus.Text = "Awaiting for the Side Yard video clip... " & i & "/70"
				End If
				Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
				wait for (rs) complete (Result As Object)
				Sleep(1000)
			Next
		Catch
			Log(LastException)
		End Try
		btnDriveway.Enabled = True
		btnRefresh.Enabled = True
		btnActivity.Enabled = True
		btnDrivewayNewClip.Enabled = True
		btnFrontDoorNewClip.Enabled = True
		btnSideYardNewClip.Enabled = True
		lblStatus.Text = "Ready"
	End If
End Sub

Sub GetUnwatchedVideos() As ResumableSub
	Try
		Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/api/v1/accounts/88438/media/changed?since=-999999999-01-01T00:00:00+18:00&page=1")
		wait for (rs) complete (Result As Object)
		
		Dim unwatchedVideoCount As Int = 0
		Dim parser As JSONParser
		parser.Initialize(response)
		Dim root As Map = parser.NextObject
		Dim media As List = root.Get("media")
		kvs.Initialize(File.DirApp, "datastore")
		Dim n As Long = DateTime.Now
		For Each colmedia As Map In media
			Dim watched As String = colmedia.Get("watched")
			'Dim VideoID As String = colmedia.Get("id")
			'Dim mytypes As Object = kvs.Get(VideoID)
			'Dim videos = mytypes As VideoInfo
			If watched = False Then
				unwatchedVideoCount = unwatchedVideoCount + 1
			End If
		Next
		Log("Loading unwatched videos took: " & (DateTime.Now - n) & "ms")
		badger1.SetBadge(btnActivity, unwatchedVideoCount)
	Catch
		Log(LastException)
	End Try
	lblStatus.Text = "Ready"
	Return Null
End Sub

'Sub StringCount(StringToSearch As String,TargetStr As String,IgnoreCase As Boolean) As Int
'	If IgnoreCase Then
'		StringToSearch = StringToSearch.ToLowerCase
'		TargetStr = TargetStr.ToLowerCase
'	End If
'	Return (StringToSearch.Length - StringToSearch.Replace(TargetStr,"").Length) / TargetStr.Length
'
'End Sub

'Sub GetUnwatchedVideos() As ResumableSub
'	Try
'		' https://www.b4x.com/android/forum/threads/b4x-xui-badger-add-badges-To-views.81723/#content
'		badger1.SetBadge(btnActivity, 0)
'		
'		RESTGet("https://rest-" & userRegion &".immedia-semi.com/api/v1/accounts/88438/media/changed?since=-999999999-01-01T00:00:00+18:00&page=1")
'		'https://rest-u006.immedia-semi.com/api/v1/accounts/88438/media/changed?since=-999999999-01-01T00:00:00+18:00&page=1
'		For i = 1 To 20
'			If response = "" Then
'				Sleep(50)
'			Else
'				Exit
'			End If
'		Next
'		
'		Dim json As String = response
'		Dim parser As JSONParser
'		parser.Initialize(json)
'		Dim root As Map = parser.NextObject
'		Dim media As List = root.Get("media")
'		For Each colmedia As Map In media
'
'			Dim watched As String = colmedia.Get("watched")
'
'			If watched <> "true" Then
'				badger1.SetBadge(btnActivity, badger1.GetBadge(btnActivity) + 1)
'				lblStatus.Text = "Found " & badger1.GetBadge(btnActivity) & " unwatched video clips..."
'			Else
'				lblStatus.Text = "Searching for unwatched video clips..."
'			End If
'
'		Next
'	Catch
'		Log(LastException)
'	End Try
'	lblStatus.Text = "Ready"
'	Return Null
'End Sub

Sub btnSideYardRefresh_Click
	Dim rs As ResumableSub = RefreshCameras(False, "458236")
	wait for (rs) complete (Result As Object)
End Sub

Sub btnFrontDoorRefresh_Click
	Dim rs As ResumableSub = RefreshCameras(False, "236967")
	wait for (rs) complete (Result As Object)
End Sub

Sub btnDrivewayRefresh_Click
	Dim rs As ResumableSub = RefreshCameras(False, "347574")
	wait for (rs) complete (Result As Object)
End Sub

Sub swArmed_ValueChanged (Value As Boolean)
		Try
			btnDriveway.Enabled = False
			btnRefresh.Enabled = False
			btnActivity.Enabled = False
			btnDrivewayNewClip.Enabled = False
			btnFrontDoorNewClip.Enabled = False
			btnSideYardNewClip.Enabled = False
			If Value Then
				lblStatus.Text = "Arming the system..."
				Dim rs As ResumableSub = RESTPost("https://rest-" & userRegion & ".immedia-semi.com/network/" & networkID & "/arm")
			Else
				lblStatus.Text = "Disarming the system..."
				Dim rs As ResumableSub = RESTPost("https://rest-" & userRegion & ".immedia-semi.com/network/" & networkID & "/disarm")
			End If
			
			wait for (rs) complete (Result As Object)
			
			If response.StartsWith("ERROR: ") Or response.Contains("System is busy, please wait") Then
				btnDriveway.Enabled = True
				btnRefresh.Enabled = True
				btnActivity.Enabled = True
				btnDrivewayNewClip.Enabled = True
				btnFrontDoorNewClip.Enabled = True
				btnSideYardNewClip.Enabled = True
				btnDrivewayNewClip.Enabled = True
				btnFrontDoorNewClip.Enabled = True
				btnSideYardNewClip.Enabled = True
				lblStatus.Text = response
				Return
			End If
			Dim rs As ResumableSub = GetCommandID(response)
			wait for (rs) complete (Result As Object)
			
			Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
			wait for (rs) complete (Result As Object)
			
			For i = 1 To 30
				Dim rs As ResumableSub = GetCommandStatus(response)
				wait for (rs) complete (Result As Object)
				If commandComplete Then
					btnRefresh_Click
					Exit
				Else
					If Value Then
						lblStatus.Text = "Arming the system... " & i & "/30"
					Else
						lblStatus.Text = "Disarming the system... " & i & "/30"
					End If
				End If
				Dim rs As ResumableSub = RESTGet("https://rest-" & userRegion &".immedia-semi.com/network/" & networkID &"/command/" & commandID)
				wait for (rs) complete (Result As Object)
				Sleep(1000)
			Next
			
			btnDriveway.Enabled = True
			btnRefresh.Enabled = True
			btnActivity.Enabled = True
			btnDrivewayNewClip.Enabled = True
			btnFrontDoorNewClip.Enabled = True
			btnSideYardNewClip.Enabled = True
			lblStatus.Text = "Ready"
			
		Catch
			Log(LastException)
		End Try
	
End Sub